rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.email == 'admin@moai.com' || 
         request.auth.uid == 'admin' || 
         request.auth.token.email.matches('.*admin.*') ||
         request.auth.token.admin == true);
    }
    
    // Helper function for admin status checking (allows reading admin collections)
    function canCheckAdminStatus() {
      return request.auth != null;
    }
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin();
    }
    
    // User profiles collection - users can read/write their own profile data
    match /userProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Cooks collection - public can read all cooks, but only write their own profile, admins can do anything
    match /cooks/{cookId} {
      allow read: if true; // Allow public read access for featured dishes display
      allow write: if request.auth != null && (request.auth.uid == cookId || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Dishes collection - public can read all dishes, cooks can write their own dishes, admins can do anything
    match /dishes/{dishId} {
      allow read: if true; // Allow public read access for featured dishes
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.cookerId || 
         request.auth.uid == request.resource.data.cookerId ||
         isAdmin());
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.cookerId || isAdmin());
    }
    
    // Orders collection - users can read/write orders they're involved in (customer, cook, or driver), admins can read/write all
    match /orders/{orderId} {
      // Allow reading if user is involved in the order
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.cookerId ||
         request.auth.uid == resource.data.driverId ||
         isAdmin());
      
      // Allow drivers to read available orders (without a driver assigned)
      allow read: if request.auth != null && 
        resource.data.status in ['pending', 'accepted', 'preparing', 'ready'] &&
        (!('driverId' in resource.data) || resource.data.driverId == null || resource.data.driverId == '');
      
      // Allow drivers to read orders with pending_approval status (they might need delivery info)
      allow read: if request.auth != null && 
        resource.data.status == 'pending_approval';
      
      // Allow write if user is involved or will be involved
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.cookerId ||
         request.auth.uid == resource.data.driverId ||
         request.auth.uid == request.resource.data.customerId || 
         request.auth.uid == request.resource.data.cookerId ||
         request.auth.uid == request.resource.data.driverId ||
         isAdmin());
    }
    
    // Reviews collection - authenticated users can read all reviews, write their own
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == request.resource.data.customerId);
    }
    
    // Drivers collection - authenticated users can read all drivers, but only write their own profile, admins can do anything
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == driverId || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Allow authenticated users to read/write their own cart data
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write their own favorites
    match /favorites/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Admins collection - users can read their own admin status for authentication checks
    match /admins/{adminId} {
      allow read: if canCheckAdminStatus() && request.auth.uid == adminId;
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // App settings collection - public can read, only admins can write
    match /appSettings/{settingId} {
      allow read: if true; // Allow public read access for app settings
      allow write: if request.auth != null && isAdmin();
    }
    
    // Delivery tracking collection - all authenticated users can read, drivers can write their own tracking
    match /deliveryTracking/{orderId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.driverId || 
         request.auth.uid == request.resource.data.driverId ||
         isAdmin());
    }
    
    // Analytics collections - authenticated users can write, admins can read
    match /searchEvents/{eventId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null;
    }
    
    match /userInteractions/{interactionId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null;
    }
    
    match /popularQueries/{queryId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null;
    }
    
    match /realTimeStats/{statId} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null;
    }
    
    // Chat rooms collection - users can read/write chat rooms they're participants in
    match /chatRooms/{roomId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow write: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid in request.resource.data.participants);
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Chat messages subcollection - nested under chat rooms
      match /chatMessages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        allow write: if request.auth != null && 
          (request.auth.uid == resource.data.senderId || 
           request.auth.uid == request.resource.data.senderId) &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.participants;
      }
    }
    
    // Top-level chat messages collection (alternative structure)
    match /chatMessages/{messageId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid in resource.data.participants);
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }
    
  }
}
