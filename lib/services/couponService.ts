import { 
  collection, 
  doc, 
  getDocs, 
  addDoc, 
  updateDoc, 
  query, 
  where, 
  orderBy, 
  Timestamp,
  increment
} from 'firebase/firestore';
import { db } from '@/lib/firebase/client';

export interface Coupon {
  id: string;
  code: string;
  title: string;
  description: string;
  type: 'percentage' | 'fixed_amount' | 'free_delivery' | 'buy_one_get_one';
  value: number; // percentage (0-100) or fixed amount in cents
  minimumOrderAmount: number;
  maximumDiscount?: number; // for percentage coupons
  usageLimit: number;
  usageCount: number;
  userUsageLimit: number; // per user
  validFrom: Timestamp;
  validUntil: Timestamp;
  isActive: boolean;
  applicableCategories: string[]; // empty array means all categories
  applicableCooks: string[]; // empty array means all cooks
  excludedCategories: string[];
  firstTimeUserOnly: boolean;
  targetAudience: 'all' | 'new_users' | 'loyal_customers' | 'specific_users';
  specificUsers: string[]; // user IDs if targetAudience is 'specific_users'
  createdAt: Timestamp;
  createdBy: string;
  autoGenerated: boolean;
  metadata?: Record<string, any>;
}

export interface UserCoupon {
  id: string;
  userId: string;
  couponId: string;
  couponCode: string;
  usedAt?: Timestamp;
  orderId?: string;
  discountAmount: number;
  isUsed: boolean;
  assignedAt: Timestamp;
  expiresAt: Timestamp;
}

export interface PromotionalCampaign {
  id: string;
  name: string;
  description: string;
  type: 'welcome_bonus' | 'seasonal' | 'loyalty_reward' | 'referral' | 'flash_sale';
  couponTemplate: Partial<Coupon>;
  startDate: Timestamp;
  endDate: Timestamp;
  targetUsers: {
    newUsers: boolean;
    existingUsers: boolean;
    inactiveUsers: boolean;
    highValueUsers: boolean;
    specificSegments: string[];
  };
  triggerConditions: {
    orderCount?: number;
    totalSpent?: number;
    daysSinceLastOrder?: number;
    firstOrder?: boolean;
  };
  isActive: boolean;
  generatedCoupons: number;
  totalRedemptions: number;
  totalSavings: number;
  createdAt: Timestamp;
}

export class CouponService {
  private static readonly COLLECTION_COUPONS = 'coupons';
  private static readonly COLLECTION_USER_COUPONS = 'userCoupons';
  private static readonly COLLECTION_CAMPAIGNS = 'promotionalCampaigns';

  // Create a new coupon
  static async createCoupon(couponData: Omit<Coupon, 'id' | 'createdAt' | 'usageCount'>): Promise<string> {
    try {
      const coupon: Omit<Coupon, 'id'> = {
        ...couponData,
        usageCount: 0,
        createdAt: Timestamp.now()
      };

      const docRef = await addDoc(collection(db, this.COLLECTION_COUPONS), coupon);
      return docRef.id;
    } catch (error) {
      console.error('Error creating coupon:', error);
      throw error;
    }
  }

  // Get all active coupons
  static async getActiveCoupons(): Promise<Coupon[]> {
    try {
      const now = Timestamp.now();
      const q = query(
        collection(db, this.COLLECTION_COUPONS),
        where('isActive', '==', true),
        where('validFrom', '<=', now),
        where('validUntil', '>=', now),
        orderBy('validUntil', 'asc')
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Coupon));
    } catch (error) {
      console.error('Error getting active coupons:', error);
      return [];
    }
  }

  // Get user's available coupons
  static async getUserCoupons(userId: string): Promise<UserCoupon[]> {
    try {
      const q = query(
        collection(db, this.COLLECTION_USER_COUPONS),
        where('userId', '==', userId),
        where('isUsed', '==', false),
        where('expiresAt', '>=', Timestamp.now()),
        orderBy('expiresAt', 'asc')
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as UserCoupon));
    } catch (error) {
      console.error('Error getting user coupons:', error);
      return [];
    }
  }

  // Validate and apply coupon to order
  static async validateCoupon(
    code: string, 
    userId: string, 
    orderData: {
      subtotal: number;
      categories: string[];
      cookIds: string[];
      isFirstOrder: boolean;
    }
  ): Promise<{
    isValid: boolean;
    coupon?: Coupon;
    discount?: number;
    error?: string;
  }> {
    try {
      // Get coupon by code
      const couponQuery = query(
        collection(db, this.COLLECTION_COUPONS),
        where('code', '==', code.toUpperCase())
      );
      
      const couponSnapshot = await getDocs(couponQuery);
      
      if (couponSnapshot.empty) {
        return { isValid: false, error: 'Cupón no encontrado' };
      }

      const couponDoc = couponSnapshot.docs[0];
      const coupon = { id: couponDoc.id, ...couponDoc.data() } as Coupon;

      // Validate coupon
      const validation = await this.validateCouponRules(coupon, userId, orderData);
      if (!validation.isValid) {
        return validation;
      }

      // Calculate discount
      const discount = this.calculateDiscount(coupon, orderData.subtotal);

      return {
        isValid: true,
        coupon,
        discount
      };

    } catch (error) {
      console.error('Error validating coupon:', error);
      return { isValid: false, error: 'Error validando el cupón' };
    }
  }

  // Apply coupon to order
  static async applyCoupon(
    couponId: string,
    userId: string,
    orderId: string,
    discountAmount: number
  ): Promise<void> {
    try {
      // Update coupon usage count
      await updateDoc(doc(db, this.COLLECTION_COUPONS, couponId), {
        usageCount: increment(1)
      });

      // Create user coupon record
      const userCoupon: Omit<UserCoupon, 'id'> = {
        userId,
        couponId,
        couponCode: '',
        usedAt: Timestamp.now(),
        orderId,
        discountAmount,
        isUsed: true,
        assignedAt: Timestamp.now(),
        expiresAt: Timestamp.now()
      };

      await addDoc(collection(db, this.COLLECTION_USER_COUPONS), userCoupon);

    } catch (error) {
      console.error('Error applying coupon:', error);
      throw error;
    }
  }

  // Auto-assign promotional coupons
  static async autoAssignPromotionalCoupons(userId: string, userProfile: any): Promise<void> {
    try {
      const activeCampaigns = await this.getActiveCampaigns();
      
      for (const campaign of activeCampaigns) {
        const shouldAssign = await this.shouldAssignCampaignCoupon(campaign, userId, userProfile);
        
        if (shouldAssign) {
          await this.assignCampaignCoupon(campaign, userId);
        }
      }
    } catch (error) {
      console.error('Error auto-assigning coupons:', error);
    }
  }

  // Generate welcome bonus for new users
  static async generateWelcomeCoupon(userId: string): Promise<void> {
    try {
      const couponCode = this.generateCouponCode('WELCOME');
      
      const welcomeCoupon: Omit<Coupon, 'id'> = {
        code: couponCode,
        title: '¡Bienvenido a Moai! 🎉',
        description: '20% de descuento en tu primer pedido',
        type: 'percentage',
        value: 20,
        minimumOrderAmount: 15000, // $15.000 CLP
        maximumDiscount: 10000, // $10.000 CLP max
        usageLimit: 1,
        usageCount: 0,
        userUsageLimit: 1,
        validFrom: Timestamp.now(),
        validUntil: Timestamp.fromDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)), // 30 days
        isActive: true,
        applicableCategories: [],
        applicableCooks: [],
        excludedCategories: [],
        firstTimeUserOnly: true,
        targetAudience: 'specific_users',
        specificUsers: [userId],
        createdAt: Timestamp.now(),
        createdBy: 'system',
        autoGenerated: true
      };

      const couponId = await this.createCoupon(welcomeCoupon);
      
      // Assign to user
      const userCoupon: Omit<UserCoupon, 'id'> = {
        userId,
        couponId,
        couponCode,
        isUsed: false,
        assignedAt: Timestamp.now(),
        expiresAt: welcomeCoupon.validUntil,
        discountAmount: 0
      };

      await addDoc(collection(db, this.COLLECTION_USER_COUPONS), userCoupon);
      
    } catch (error) {
      console.error('Error generating welcome coupon:', error);
    }
  }

  // Generate loyalty reward coupon
  static async generateLoyaltyCoupon(userId: string, orderCount: number): Promise<void> {
    try {
      let discountValue = 15; // Default 15%
      let title = '¡Gracias por tu lealtad! 💖';
      
      // Increase discount based on order count
      if (orderCount >= 10) discountValue = 25;
      else if (orderCount >= 5) discountValue = 20;
      
      const couponCode = this.generateCouponCode('LOYAL');
      
      const loyaltyCoupon: Omit<Coupon, 'id'> = {
        code: couponCode,
        title,
        description: `${discountValue}% de descuento por ser un cliente leal`,
        type: 'percentage',
        value: discountValue,
        minimumOrderAmount: 20000,
        maximumDiscount: 15000,
        usageLimit: 1,
        usageCount: 0,
        userUsageLimit: 1,
        validFrom: Timestamp.now(),
        validUntil: Timestamp.fromDate(new Date(Date.now() + 14 * 24 * 60 * 60 * 1000)), // 14 days
        isActive: true,
        applicableCategories: [],
        applicableCooks: [],
        excludedCategories: [],
        firstTimeUserOnly: false,
        targetAudience: 'specific_users',
        specificUsers: [userId],
        createdAt: Timestamp.now(),
        createdBy: 'system',
        autoGenerated: true,
        metadata: { triggerOrderCount: orderCount }
      };

      await this.createCoupon(loyaltyCoupon);
      
    } catch (error) {
      console.error('Error generating loyalty coupon:', error);
    }
  }

  // Generate referral coupon
  static async generateReferralCoupons(referrerId: string, refereeId: string): Promise<void> {
    try {
      // Coupon for the referrer
      const referrerCode = this.generateCouponCode('REF');
      const referrerCoupon: Omit<Coupon, 'id'> = {
        code: referrerCode,
        title: '¡Gracias por invitar a un amigo! 👥',
        description: '$5.000 de descuento por referir a un amigo',
        type: 'fixed_amount',
        value: 5000,
        minimumOrderAmount: 15000,
        usageLimit: 1,
        usageCount: 0,
        userUsageLimit: 1,
        validFrom: Timestamp.now(),
        validUntil: Timestamp.fromDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)),
        isActive: true,
        applicableCategories: [],
        applicableCooks: [],
        excludedCategories: [],
        firstTimeUserOnly: false,
        targetAudience: 'specific_users',
        specificUsers: [referrerId],
        createdAt: Timestamp.now(),
        createdBy: 'system',
        autoGenerated: true,
        metadata: { refereeId }
      };

      // Coupon for the referee
      const refereeCode = this.generateCouponCode('FRIEND');
      const refereeCoupon: Omit<Coupon, 'id'> = {
        code: refereeCode,
        title: '¡Bienvenido! Tu amigo te invitó 🎁',
        description: '$3.000 de descuento en tu primer pedido',
        type: 'fixed_amount',
        value: 3000,
        minimumOrderAmount: 10000,
        usageLimit: 1,
        usageCount: 0,
        userUsageLimit: 1,
        validFrom: Timestamp.now(),
        validUntil: Timestamp.fromDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)),
        isActive: true,
        applicableCategories: [],
        applicableCooks: [],
        excludedCategories: [],
        firstTimeUserOnly: true,
        targetAudience: 'specific_users',
        specificUsers: [refereeId],
        createdAt: Timestamp.now(),
        createdBy: 'system',
        autoGenerated: true,
        metadata: { referrerId }
      };

      await Promise.all([
        this.createCoupon(referrerCoupon),
        this.createCoupon(refereeCoupon)
      ]);
      
    } catch (error) {
      console.error('Error generating referral coupons:', error);
    }
  }

  // Private helper methods
  private static async validateCouponRules(
    coupon: Coupon,
    userId: string,
    orderData: any
  ): Promise<{ isValid: boolean; error?: string }> {
    const now = Timestamp.now();

    // Check if coupon is active
    if (!coupon.isActive) {
      return { isValid: false, error: 'Este cupón no está activo' };
    }

    // Check validity period
    if (coupon.validFrom > now || coupon.validUntil < now) {
      return { isValid: false, error: 'Este cupón ha expirado o aún no es válido' };
    }

    // Check usage limit
    if (coupon.usageCount >= coupon.usageLimit) {
      return { isValid: false, error: 'Este cupón ha alcanzado su límite de uso' };
    }

    // Check minimum order amount
    if (orderData.subtotal < coupon.minimumOrderAmount) {
      return { 
        isValid: false, 
        error: `Pedido mínimo de $${coupon.minimumOrderAmount.toLocaleString()} para usar este cupón` 
      };
    }

    // Check first time user only
    if (coupon.firstTimeUserOnly && !orderData.isFirstOrder) {
      return { isValid: false, error: 'Este cupón es solo para nuevos usuarios' };
    }

    // Check target audience
    if (coupon.targetAudience === 'specific_users' && !coupon.specificUsers.includes(userId)) {
      return { isValid: false, error: 'Este cupón no está disponible para tu cuenta' };
    }

    // Check user usage limit
    const userUsageCount = await this.getUserCouponUsageCount(userId, coupon.id);
    if (userUsageCount >= coupon.userUsageLimit) {
      return { isValid: false, error: 'Ya has usado este cupón el máximo de veces permitido' };
    }

    // Check applicable categories
    if (coupon.applicableCategories.length > 0) {
      const hasApplicableCategory = orderData.categories.some((cat: string) => 
        coupon.applicableCategories.includes(cat)
      );
      if (!hasApplicableCategory) {
        return { 
          isValid: false, 
          error: 'Este cupón no es aplicable a los productos en tu carrito' 
        };
      }
    }

    // Check excluded categories
    if (coupon.excludedCategories.length > 0) {
      const hasExcludedCategory = orderData.categories.some((cat: string) => 
        coupon.excludedCategories.includes(cat)
      );
      if (hasExcludedCategory) {
        return { 
          isValid: false, 
          error: 'Este cupón no puede usarse con algunos productos en tu carrito' 
        };
      }
    }

    return { isValid: true };
  }

  private static calculateDiscount(coupon: Coupon, subtotal: number): number {
    switch (coupon.type) {
      case 'percentage':
        const percentageDiscount = (subtotal * coupon.value) / 100;
        return coupon.maximumDiscount 
          ? Math.min(percentageDiscount, coupon.maximumDiscount)
          : percentageDiscount;
      
      case 'fixed_amount':
        return Math.min(coupon.value, subtotal);
      
      case 'free_delivery':
        return 0; // This would be handled separately in delivery fee calculation
      
      default:
        return 0;
    }
  }

  private static generateCouponCode(prefix: string): string {
    const timestamp = Date.now().toString().slice(-6);
    const random = Math.random().toString(36).substring(2, 6).toUpperCase();
    return `${prefix}${timestamp}${random}`;
  }

  private static async getUserCouponUsageCount(userId: string, couponId: string): Promise<number> {
    try {
      const q = query(
        collection(db, this.COLLECTION_USER_COUPONS),
        where('userId', '==', userId),
        where('couponId', '==', couponId),
        where('isUsed', '==', true)
      );

      const snapshot = await getDocs(q);
      return snapshot.size;
    } catch (error) {
      console.error('Error getting user coupon usage count:', error);
      return 0;
    }
  }

  private static async getActiveCampaigns(): Promise<PromotionalCampaign[]> {
    try {
      const now = Timestamp.now();
      const q = query(
        collection(db, this.COLLECTION_CAMPAIGNS),
        where('isActive', '==', true),
        where('startDate', '<=', now),
        where('endDate', '>=', now)
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as PromotionalCampaign));
    } catch (error) {
      console.error('Error getting active campaigns:', error);
      return [];
    }
  }

  private static async shouldAssignCampaignCoupon(
    campaign: PromotionalCampaign,
    userId: string,
    userProfile: any
  ): Promise<boolean> {
    // Implement campaign assignment logic based on user profile and trigger conditions
    // This is a simplified version
    return false;
  }

  private static async assignCampaignCoupon(
    campaign: PromotionalCampaign,
    userId: string
  ): Promise<void> {
    // Implement campaign coupon assignment
    // This would create a coupon based on the campaign template
  }
}