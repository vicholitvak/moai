'use client';

import { useState } from 'react';
import { UserProfileService } from '@/lib/services/userProfileService';
import type { UserProfile } from '@/lib/services/userProfileService';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from 'sonner';
import { 
  User, 
  Phone, 
  MapPin, 
  Building,
  MessageSquare,
  CheckCircle,
  Loader2
} from 'lucide-react';

interface ProfileSetupProps {
  userId: string;
  initialProfile?: UserProfile | null;
  onComplete: (profile: UserProfile) => void;
  onSkip?: () => void;
  showSkip?: boolean;
}

const ProfileSetup = ({ 
  userId, 
  initialProfile, 
  onComplete, 
  onSkip,
  showSkip = false 
}: ProfileSetupProps) => {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    phone: initialProfile?.phone || '',
    street: initialProfile?.address?.street || '',
    district: initialProfile?.address?.district || '',
    city: initialProfile?.address?.city || 'Santiago',
    details: initialProfile?.address?.details || '',
    instructions: initialProfile?.address?.instructions || ''
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  const communes = UserProfileService.getChileanCommunes();

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    // Validate phone
    if (!formData.phone.trim()) {
      newErrors.phone = 'El teléfono es requerido';
    } else if (!UserProfileService.validateChileanPhone(formData.phone)) {
      newErrors.phone = 'Ingresa un número de teléfono chileno válido';
    }

    // Validate address
    if (!formData.street.trim()) {
      newErrors.street = 'La dirección es requerida';
    }

    if (!formData.district) {
      newErrors.district = 'La comuna es requerida';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error('Por favor corrige los errores en el formulario');
      return;
    }

    setLoading(true);
    
    try {
      const success = await UserProfileService.updateUserProfile(userId, {
        phone: formData.phone,
        address: {
          street: formData.street,
          city: formData.city,
          district: formData.district,
          details: formData.details,
          instructions: formData.instructions,
          fullAddress: '' // Will be generated by the service
        }
      });

      if (success) {
        // Get updated profile
        const updatedProfile = await UserProfileService.getUserProfile(userId);
        if (updatedProfile) {
          toast.success('Perfil actualizado exitosamente');
          onComplete(updatedProfile);
        }
      } else {
        toast.error('Error al actualizar el perfil');
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Error al actualizar el perfil');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader className="text-center">
          <div className="mx-auto mb-4 p-3 bg-primary/10 rounded-full w-fit">
            <User className="h-8 w-8 text-primary" />
          </div>
          <CardTitle className="text-2xl">Completa tu Perfil</CardTitle>
          <p className="text-muted-foreground">
            Necesitamos algunos datos para procesar tus pedidos y entregas
          </p>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Phone Number */}
            <div className="space-y-2">
              <Label htmlFor="phone" className="flex items-center gap-2">
                <Phone className="h-4 w-4" />
                Número de Teléfono
              </Label>
              <Input
                id="phone"
                type="tel"
                placeholder="Ej: 9 1234 5678"
                value={formData.phone}
                onChange={(e) => handleInputChange('phone', e.target.value)}
                className={errors.phone ? 'border-red-500' : ''}
              />
              {errors.phone && (
                <p className="text-sm text-red-500">{errors.phone}</p>
              )}
              <p className="text-xs text-muted-foreground">
                Formato: celular (9 XXXX XXXX) o fijo (2 XXXX XXXX)
              </p>
            </div>

            {/* Address Section */}
            <div className="space-y-4">
              <div className="flex items-center gap-2 text-sm font-medium">
                <MapPin className="h-4 w-4" />
                Dirección de Entrega
              </div>

              {/* Street Address */}
              <div className="space-y-2">
                <Label htmlFor="street">Dirección</Label>
                <Input
                  id="street"
                  placeholder="Ej: Av. Las Condes 1234"
                  value={formData.street}
                  onChange={(e) => handleInputChange('street', e.target.value)}
                  className={errors.street ? 'border-red-500' : ''}
                />
                {errors.street && (
                  <p className="text-sm text-red-500">{errors.street}</p>
                )}
              </div>

              {/* City and District */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="city">Ciudad</Label>
                  <Input
                    id="city"
                    value={formData.city}
                    onChange={(e) => handleInputChange('city', e.target.value)}
                    placeholder="Santiago"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="district">Comuna</Label>
                  <Select 
                    value={formData.district} 
                    onValueChange={(value) => handleInputChange('district', value)}
                  >
                    <SelectTrigger className={errors.district ? 'border-red-500' : ''}>
                      <SelectValue placeholder="Selecciona tu comuna" />
                    </SelectTrigger>
                    <SelectContent>
                      {communes.map((commune) => (
                        <SelectItem key={commune} value={commune}>
                          {commune}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {errors.district && (
                    <p className="text-sm text-red-500">{errors.district}</p>
                  )}
                </div>
              </div>

              {/* Address Details */}
              <div className="space-y-2">
                <Label htmlFor="details" className="flex items-center gap-2">
                  <Building className="h-4 w-4" />
                  Detalles (Opcional)
                </Label>
                <Input
                  id="details"
                  placeholder="Ej: Depto 301, Edificio Torre Norte"
                  value={formData.details}
                  onChange={(e) => handleInputChange('details', e.target.value)}
                />
              </div>

              {/* Delivery Instructions */}
              <div className="space-y-2">
                <Label htmlFor="instructions" className="flex items-center gap-2">
                  <MessageSquare className="h-4 w-4" />
                  Instrucciones de Entrega (Opcional)
                </Label>
                <Textarea
                  id="instructions"
                  placeholder="Ej: Timbre del conserje, entregar en portería, etc."
                  value={formData.instructions}
                  onChange={(e) => handleInputChange('instructions', e.target.value)}
                  rows={3}
                />
              </div>
            </div>

            {/* Benefits Info */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <CheckCircle className="h-5 w-5 text-blue-600 mt-0.5" />
                <div>
                  <h4 className="font-medium text-blue-800 mb-1">
                    ¿Por qué necesitamos estos datos?
                  </h4>
                  <ul className="text-sm text-blue-700 space-y-1">
                    <li>• Contactarte sobre el estado de tu pedido</li>
                    <li>• Coordinar la entrega con el conductor</li>
                    <li>• Agilizar futuros pedidos (no tendrás que volver a ingresar estos datos)</li>
                    <li>• Mejorar la experiencia de entrega</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Actions */}
            <div className="flex flex-col sm:flex-row gap-3">
              <Button 
                type="submit" 
                disabled={loading}
                className="flex-1"
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Guardando...
                  </>
                ) : (
                  <>
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Guardar Perfil
                  </>
                )}
              </Button>
              
              {showSkip && onSkip && (
                <Button 
                  type="button" 
                  variant="outline"
                  onClick={onSkip}
                  disabled={loading}
                >
                  Completar Después
                </Button>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default ProfileSetup;